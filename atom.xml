<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunSufei&#39;s Blog</title>
  
  
  <link href="https://sunsufei.github.io/atom.xml" rel="self"/>
  
  <link href="https://sunsufei.github.io/"/>
  <updated>2024-03-19T11:03:18.324Z</updated>
  <id>https://sunsufei.github.io/</id>
  
  <author>
    <name>SunSufei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Repeater题解</title>
    <link href="https://sunsufei.github.io/article/997007597/"/>
    <id>https://sunsufei.github.io/article/997007597/</id>
    <published>2024-03-19T11:00:32.000Z</published>
    <updated>2024-03-19T11:03:18.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题源"><a href="#题源" class="headerlink" title="题源"></a>题源</h2><p><a href="https://www.nowcoder.com/practice/97fd3a67eff4455ea3f4d179d6467de9?tpId=40&tqId=21389&tPage=1&rp=1&ru=/ta/kaoyan&qru=/ta/kaoyan/question-ranking">Repeater_牛客题霸_牛客网 (nowcoder.com)</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><blockquote><p>  使用了递归的方法</p></blockquote><p>题目的关键在于确定最后打印的位置，我们可以分步确定，这是一种分形图像，对于每个层次（忽略局部）的图像，我们都知道在哪些地方绘画，通过递归的方法，一层层传递，将位置从整体传递到具体的局部，最终得到答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">paint_to_array</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> size, <span class="type">int</span> begin_row, <span class="type">int</span> begin_col,</span></span></span><br><span class="line"><span class="params"><span class="function">                    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; template_array,</span></span></span><br><span class="line"><span class="params"><span class="function">                    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; painting_array)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">paint_to_array</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> size, <span class="type">int</span> begin_row, <span class="type">int</span> begin_col,</span></span></span><br><span class="line"><span class="params"><span class="function">                    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; template_array,</span></span></span><br><span class="line"><span class="params"><span class="function">                    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; painting_array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                painting_array[begin_row + i - <span class="number">1</span>][begin_col + j - <span class="number">1</span>] = template_array[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> next_size = size / n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (template_array[i][j] != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> next_begin_row = begin_row + (i - <span class="number">1</span>) * next_size;</span><br><span class="line">                    <span class="type">int</span> next_begin_col = begin_col + (j - <span class="number">1</span>) * next_size;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">paint_to_array</span>(n, next_size, next_begin_row, next_begin_col, template_array,</span><br><span class="line">                                   painting_array);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">template_array</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(n + <span class="number">1</span>, <span class="string">&#x27; &#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> temp;</span><br><span class="line">        cin.<span class="built_in">get</span>(temp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                cin.<span class="built_in">get</span>(temp);</span><br><span class="line">                template_array[i][j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            cin.<span class="built_in">get</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="type">int</span> painting_size = <span class="built_in">pow</span>(n, m);</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">painting_array</span>(painting_size + <span class="number">1</span>,</span><br><span class="line">                                            <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(painting_size + <span class="number">1</span>, <span class="string">&#x27; &#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">paint_to_array</span>(n, painting_size, <span class="number">1</span>, <span class="number">1</span>, template_array, painting_array);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= painting_size; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= painting_size; ++j) &#123;</span><br><span class="line">                cout &lt;&lt; painting_array[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题源&quot;&gt;&lt;a href=&quot;#题源&quot; class=&quot;headerlink&quot; title=&quot;题源&quot;&gt;&lt;/a&gt;题源&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/97fd3a67eff4455ea3f4d179d64</summary>
      
    
    
    
    <category term="OJ" scheme="https://sunsufei.github.io/category/OJ/"/>
    
    
    <category term="递归" scheme="https://sunsufei.github.io/tag/%E9%80%92%E5%BD%92/"/>
    
    <category term="分形" scheme="https://sunsufei.github.io/tag/%E5%88%86%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>与Hexo博客界面相关的一些应用</title>
    <link href="https://sunsufei.github.io/article/1024846679/"/>
    <id>https://sunsufei.github.io/article/1024846679/</id>
    <published>2024-03-18T04:17:52.000Z</published>
    <updated>2024-03-18T11:22:38.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li>abbrlink</li><li>algolia</li><li>valine</li><li>waline</li><li>vercl</li></ul><h2 id="Abbrlink"><a href="#Abbrlink" class="headerlink" title="Abbrlink"></a>Abbrlink</h2><p>😊旨在为博客的文章（即网页Page）生成唯一的字符串，用于组成URL，摒弃Hexo自带的<code>:year/:month/:day/:title/</code>，因为层次太多是不利于SEO的。</p><h2 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h2><p>数据库</p><h2 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h2><ul><li>优点<ul><li>配置简洁方便</li></ul></li><li>缺点<ul><li>有网友指出存在安全问题</li><li>无后台管理系统</li></ul></li></ul><h2 id="Waline"><a href="#Waline" class="headerlink" title="Waline"></a>Waline</h2><p><a href="https://izumi.vip/2022/11/12/Waline%E5%9B%BD%E5%86%85IP%E6%97%A0%E6%B3%95%E8%AF%84%E8%AE%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/index.html">https://izumi.vip/2022/11/12/Waline%E5%9B%BD%E5%86%85IP%E6%97%A0%E6%B3%95%E8%AF%84%E8%AE%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/index.html</a></p><h2 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h2><p>服务端</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;abbrlink&lt;/li&gt;
&lt;li&gt;algolia&lt;/li&gt;
&lt;li&gt;valin</summary>
      
    
    
    
    <category term="分享" scheme="https://sunsufei.github.io/category/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="hexo" scheme="https://sunsufei.github.io/tag/hexo/"/>
    
    <category term="abbrlink" scheme="https://sunsufei.github.io/tag/abbrlink/"/>
    
    <category term="algolia" scheme="https://sunsufei.github.io/tag/algolia/"/>
    
    <category term="valine" scheme="https://sunsufei.github.io/tag/valine/"/>
    
    <category term="waline" scheme="https://sunsufei.github.io/tag/waline/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://sunsufei.github.io/article/3632233996/"/>
    <id>https://sunsufei.github.io/article/3632233996/</id>
    <published>2024-03-18T04:10:13.000Z</published>
    <updated>2024-03-18T04:10:14.132Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
